package cl.jesualex.desafio_android.repo.data.domain.mapper

import cl.jesualex.desafio_android.base.data.Mapper
import cl.jesualex.desafio_android.repo.data.domain.entity.Repo
import cl.jesualex.desafio_android.repo.data.local.RepoLocal

/**
 * Created by jesualex on 2019-05-30.
 */
class RepoLocalToDomainMapper: Mapper<RepoLocal, Repo>() {
    private val userMapper = UserLocalToDomainMapper()
    private val licenseMapper = LicenseLocalToDomainMapper()

    override fun map(value: RepoLocal): Repo {
        return Repo(
            id = value.id,
            node_id = value.node_id,
            name = value.name,
            full_name = value.full_name,
            private = value.private,
            owner = value.owner?.let{ userMapper.map(it) },
            html_url = value.html_url,
            description = value.description,
            fork = value.fork,
            url = value.url,
            forks_url = value.forks_url,
            keys_urls_url = value.keys_urls_url,
            collaborators_url = value.collaborators_url,
            teams_url = value.teams_url,
            hooks_url = value.hooks_url,
            issue_events_url = value.issue_events_url,
            events_url = value.events_url,
            assignees_url = value.assignees_url,
            branches_url = value.branches_url,
            tags_url = value.tags_url,
            blobs_url = value.blobs_url,
            git_tags_url = value.git_tags_url,
            git_refs_url = value.git_refs_url,
            trees_url = value.trees_url,
            statuses_url = value.statuses_url,
            languages_url = value.languages_url,
            stargazers_url = value.stargazers_url,
            contributors_url = value.contributors_url,
            subscribers_url = value.subscribers_url,
            subscription_url = value.subscription_url,
            commits_url = value.commits_url,
            git_commits_url = value.git_commits_url,
            comments_url = value.comments_url,
            issue_comment_url = value.issue_comment_url,
            contents_url = value.contents_url,
            compare_url = value.compare_url,
            merges_url = value.merges_url,
            archive_url = value.archive_url,
            downloads_url = value.downloads_url,
            issues_url = value.issues_url,
            pulls_url = value.pulls_url,
            milestones_url = value.milestones_url,
            notifications_url = value.notifications_url,
            labels_url = value.labels_url,
            releases_url = value.releases_url,
            deployments_url = value.deployments_url,
            created_at = value.created_at,
            updated_at = value.updated_at,
            pushed_at = value.pushed_at,
            git_url = value.git_url,
            ssh_url = value.ssh_url,
            clone_url = value.clone_url,
            svn_url = value.svn_url,
            homepage = value.homepage,
            size = value.size,
            stargazers_count = value.stargazers_count,
            watchers_count = value.watchers_count,
            language = value.language,
            has_issues = value.has_issues,
            has_projects = value.has_projects,
            has_downloads = value.has_downloads,
            has_wiki = value.has_wiki,
            has_pages = value.has_pages,
            forks_count = value.forks_count,
            mirror_url = value.mirror_url,
            archived = value.archived,
            disabled = value.disabled,
            open_issues_count = value.open_issues_count,
            license = value.license?.let{ licenseMapper.map(it) },
            forks = value.forks,
            open_issues = value.open_issues,
            watchers = value.watchers,
            default_branch = value.default_branch,
            score = value.score
        )
    }

    override fun reverseMap(value: Repo): RepoLocal {
        return RepoLocal(
            id = value.id,
            node_id = value.node_id,
            name = value.name,
            full_name = value.full_name,
            private = value.private,
            owner = value.owner?.let{ userMapper.reverseMap(it) },
            html_url = value.html_url,
            description = value.description,
            fork = value.fork,
            url = value.url,
            forks_url = value.forks_url,
            keys_urls_url = value.keys_urls_url,
            collaborators_url = value.collaborators_url,
            teams_url = value.teams_url,
            hooks_url = value.hooks_url,
            issue_events_url = value.issue_events_url,
            events_url = value.events_url,
            assignees_url = value.assignees_url,
            branches_url = value.branches_url,
            tags_url = value.tags_url,
            blobs_url = value.blobs_url,
            git_tags_url = value.git_tags_url,
            git_refs_url = value.git_refs_url,
            trees_url = value.trees_url,
            statuses_url = value.statuses_url,
            languages_url = value.languages_url,
            stargazers_url = value.stargazers_url,
            contributors_url = value.contributors_url,
            subscribers_url = value.subscribers_url,
            subscription_url = value.subscription_url,
            commits_url = value.commits_url,
            git_commits_url = value.git_commits_url,
            comments_url = value.comments_url,
            issue_comment_url = value.issue_comment_url,
            contents_url = value.contents_url,
            compare_url = value.compare_url,
            merges_url = value.merges_url,
            archive_url = value.archive_url,
            downloads_url = value.downloads_url,
            issues_url = value.issues_url,
            pulls_url = value.pulls_url,
            milestones_url = value.milestones_url,
            notifications_url = value.notifications_url,
            labels_url = value.labels_url,
            releases_url = value.releases_url,
            deployments_url = value.deployments_url,
            created_at = value.created_at,
            updated_at = value.updated_at,
            pushed_at = value.pushed_at,
            git_url = value.git_url,
            ssh_url = value.ssh_url,
            clone_url = value.clone_url,
            svn_url = value.svn_url,
            homepage = value.homepage,
            size = value.size,
            stargazers_count = value.stargazers_count,
            watchers_count = value.watchers_count,
            language = value.language,
            has_issues = value.has_issues,
            has_projects = value.has_projects,
            has_downloads = value.has_downloads,
            has_wiki = value.has_wiki,
            has_pages = value.has_pages,
            forks_count = value.forks_count,
            mirror_url = value.mirror_url,
            archived = value.archived,
            disabled = value.disabled,
            open_issues_count = value.open_issues_count,
            license = value.license?.let{ licenseMapper.reverseMap(it) },
            forks = value.forks,
            open_issues = value.open_issues,
            watchers = value.watchers,
            default_branch = value.default_branch,
            score = value.score
        )
    }
}